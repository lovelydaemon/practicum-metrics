// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/services/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/server/services/interfaces.go -destination ./internal/server/services/mocks_test.go -package services_test
//

// Package services_test is a generated GoMock package.
package services_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockMetrics) GetAll() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMetricsMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMetrics)(nil).GetAll))
}

// GetMetricValue mocks base method.
func (m *MockMetrics) GetMetricValue(metricType, metricName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricValue", metricType, metricName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricValue indicates an expected call of GetMetricValue.
func (mr *MockMetricsMockRecorder) GetMetricValue(metricType, metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricValue", reflect.TypeOf((*MockMetrics)(nil).GetMetricValue), metricType, metricName)
}

// Save mocks base method.
func (m *MockMetrics) Save(metricType, metricName, metricValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", metricType, metricName, metricValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricsMockRecorder) Save(metricType, metricName, metricValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetrics)(nil).Save), metricType, metricName, metricValue)
}

// MockMetricsRepo is a mock of MetricsRepo interface.
type MockMetricsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRepoMockRecorder
	isgomock struct{}
}

// MockMetricsRepoMockRecorder is the mock recorder for MockMetricsRepo.
type MockMetricsRepoMockRecorder struct {
	mock *MockMetricsRepo
}

// NewMockMetricsRepo creates a new mock instance.
func NewMockMetricsRepo(ctrl *gomock.Controller) *MockMetricsRepo {
	mock := &MockMetricsRepo{ctrl: ctrl}
	mock.recorder = &MockMetricsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRepo) EXPECT() *MockMetricsRepoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockMetricsRepo) GetAll() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMetricsRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMetricsRepo)(nil).GetAll))
}

// GetCounter mocks base method.
func (m *MockMetricsRepo) GetCounter(metricName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", metricName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMetricsRepoMockRecorder) GetCounter(metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMetricsRepo)(nil).GetCounter), metricName)
}

// GetGauge mocks base method.
func (m *MockMetricsRepo) GetGauge(metricName string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", metricName)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockMetricsRepoMockRecorder) GetGauge(metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockMetricsRepo)(nil).GetGauge), metricName)
}

// SaveCounter mocks base method.
func (m *MockMetricsRepo) SaveCounter(metricName string, metricValue int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveCounter", metricName, metricValue)
}

// SaveCounter indicates an expected call of SaveCounter.
func (mr *MockMetricsRepoMockRecorder) SaveCounter(metricName, metricValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCounter", reflect.TypeOf((*MockMetricsRepo)(nil).SaveCounter), metricName, metricValue)
}

// SaveGauge mocks base method.
func (m *MockMetricsRepo) SaveGauge(metricName string, metricValue float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveGauge", metricName, metricValue)
}

// SaveGauge indicates an expected call of SaveGauge.
func (mr *MockMetricsRepoMockRecorder) SaveGauge(metricName, metricValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGauge", reflect.TypeOf((*MockMetricsRepo)(nil).SaveGauge), metricName, metricValue)
}
